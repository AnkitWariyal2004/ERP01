MONGODB_URI="mongodb+srv://AnkitWariyal:AnkitWariyal2004@cluster0.nb2fo.mongodb.net/ERP?retryWrites=true&w=majority&appName=Cluster0"


export async function POST(req: Request) {
  try {
    await connectDB();

    const body = await req.json();
    const { productId, weightId, totalQR, date } = body;

    if (!productId || !weightId || !totalQR || totalQR <= 0) {
      return NextResponse.json({ message: 'Invalid input', success:false }, { status: 400 });
    }

    // Find the product by ID
    const product = await Product.findById(productId);
    if (!product) {
      return NextResponse.json({ message: 'Product not found',success:false }, { status: 404 });
    }

    // Find the weight inside the product
    const weight = product.weights.id(weightId);
    if (!weight) {
      return NextResponse.json({ message: 'Weight not found',success:false }, { status: 400 });
    }

    const isAlready = await Production.findOne({ productId, weightId });

    if (isAlready) {
      const newTotal = isAlready.totalQR + totalQR;
      if (newTotal > weight.quantity) {
        return NextResponse.json({
          message: `Insufficient quantity. Available: ${weight.quantity}, Requested: ${newTotal}`,success:false
        }, { status: 400 });
      }

      isAlready.totalQR = newTotal;
      isAlready.createdAt = date || new Date();
      await isAlready.save();

      return NextResponse.json(isAlready, { status: 200 });
    }

    if (totalQR > weight.quantity) {
      return NextResponse.json({
        message: `Insufficient quantity. Available: ${weight.quantity}, Requested: ${totalQR}`,success:false
      }, { status: 201 });
    }

    const newEntry = await Production.create({
      productId,
      weightId,
      totalQR,
      createdAt: date || new Date(),
    });

    return NextResponse.json( {message:"success",newEntry, success:true},{ status: 201 });
  } catch (err) {
    console.error('POST /api/production error:', err);
    return NextResponse.json({ message: 'Server error' }, { status: 500 });
  }
}